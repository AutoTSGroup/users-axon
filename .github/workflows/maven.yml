name: project cicd flow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Maven settings
        run: |
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                  </repository>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/AutoTSGroup/commons</url>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF
      
      

      - name: Extract version from branch or tag
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi
          


      - name: Update POM version
        run: mvn versions:set -DnewVersion=$VERSION

      - name: Build with Maven (excluding specific modules)
        run: mvn clean install

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: '**/target/*.jar'

  tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                  </repository>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/AutoTSGroup/commons</url>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Run Tests
        run: mvn test


  docker:
    runs-on: ubuntu-latest
    needs: [ build, tests ]
    if: |
      startsWith(github.ref, 'refs/heads/dev-') ||
      startsWith(github.ref, 'refs/heads/release-') ||
      github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                  </repository>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/AutoTSGroup/commons</url>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Extract version
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Debug VERSION
        run: echo "VERSION=${{ env.VERSION }}"

      - name: Copy Maven settings for Docker build
        run: cp ~/.m2/settings.xml .

      - name: Build Docker Image
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            echo "VERSION is empty, setting default value."
            VERSION=latest
          fi
          docker build -t ghcr.io/autotsgroup/users-axon/app:${{ env.VERSION }} .

      - name: Push Docker Image
        run: |
          docker push ghcr.io/autotsgroup/users-axon/app:${{ env.VERSION }}
  
  
  
